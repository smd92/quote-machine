{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["QuoteMachine","props","state","text","author","tsbOptions","rerenderTsb","fetchQuote","bind","this","fetch","then","response","json","data","setState","content","options","React","Component","QuoteBox","id","url","className","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,OAAQ,GACRC,WAAY,CAAEF,KAAM,IACpBG,aAAa,GAEf,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBARD,E,qDAWnB,WACEC,KAAKF,e,wBAGP,WAAc,IAAD,OACXG,MAAM,kCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZZ,KAAMW,EAAKE,QACXZ,OAAQU,EAAKV,OACbC,WAAY,CAAEF,KAAK,IAAD,OAAMW,EAAKE,QAAX,gBAA0BF,EAAKV,SACjDE,aAAc,EAAKJ,MAAMI,mB,oBAKjC,WACE,OACE,cAAC,EAAD,CACEH,KAAI,WAAMM,KAAKP,MAAMC,KAAjB,KACJC,OAAM,YAAOK,KAAKP,MAAME,QACxBG,WAAYE,KAAKF,WACjBU,QAASR,KAAKP,MAAMG,WACpBC,YAAaG,KAAKP,MAAMI,kB,GApCLY,IAAMC,WA0C3BC,EAAW,SAACnB,GAChB,OACE,sBAAKoB,GAAG,YAAR,UACE,mBAAGA,GAAG,OAAN,SAAcpB,EAAME,OACpB,mBAAGkB,GAAG,SAAN,SAAgBpB,EAAMG,SACtB,cAAC,IAAD,CACEiB,GAAG,QACHC,IAAG,KACHL,QAAShB,EAAMgB,SACVhB,EAAMK,aAEb,wBACEe,GAAG,YACHE,UAAU,kBACVC,QAASvB,EAAMM,WAHjB,2BAsBSkB,MAXf,WACE,OACE,qBAAKF,UAAU,MAAf,SACE,uBAAMA,UAAU,cAAhB,UACE,cAAC,EAAD,IACA,+CC7DOG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ab0fc550.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from \"react\";\nimport { TwitterShareButton } from \"react-twitter-embed\";\n\nclass QuoteMachine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      author: \"\",\n      tsbOptions: { text: \"\" },\n      rerenderTsb: true,\n    };\n    this.fetchQuote = this.fetchQuote.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchQuote();\n  }\n\n  fetchQuote() {\n    fetch(\"https://api.quotable.io/random\")\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          text: data.content,\n          author: data.author,\n          tsbOptions: { text: `\"${data.content}\"\\n- ${data.author}` },\n          rerenderTsb: !this.state.rerenderTsb,\n        });\n      });\n  }\n\n  render() {\n    return (\n      <QuoteBox\n        text={`\"${this.state.text}\"`}\n        author={`- ${this.state.author}`}\n        fetchQuote={this.fetchQuote}\n        options={this.state.tsbOptions}\n        rerenderTsb={this.state.rerenderTsb}\n      />\n    );\n  }\n}\n\nconst QuoteBox = (props) => {\n  return (\n    <div id=\"quote-box\">\n      <p id=\"text\">{props.text}</p>\n      <p id=\"author\">{props.author}</p>\n      <TwitterShareButton\n        id=\"tweet\"\n        url={`\\n`}\n        options={props.options}\n        key={props.rerenderTsb}\n      />\n      <button\n        id=\"new-quote\"\n        className=\"btn btn-primary\"\n        onClick={props.fetchQuote}\n      >\n        new quote\n      </button>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className=\"App-content\">\n        <QuoteMachine />\n        <p>by smd92</p>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}