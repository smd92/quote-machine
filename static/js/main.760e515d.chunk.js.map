{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["QuoteMachine","props","state","quote","xhr","XMLHttpRequest","withCredentials","addEventListener","this","readyState","DONE","console","log","responseText","open","setRequestHeader","send","setState","response","React","Component","QuoteBox","id","className","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAGMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IAHQ,E,qDAOnB,WACE,IAEMC,EAAM,IAAIC,eAChBD,EAAIE,iBAAkB,EAEtBF,EAAIG,iBAAiB,oBAAoB,WACnCC,KAAKC,aAAeD,KAAKE,MAC3BC,QAAQC,IAAIJ,KAAKK,iBAIrBT,EAAIU,KAAK,MAAO,kEAChBV,EAAIW,iBAAiB,iBAAkB,mBACvCX,EAAIW,iBAAiB,kBAAmB,oCAExCX,EAAIY,KAfS,MAgBbR,KAAKS,SAAS,CACZd,MAAOC,EAAIc,WAEbP,QAAQC,IAAIR,EAAIc,Y,oBAGlB,WACE,OACE,cAAC,EAAD,Q,GAjCqBC,IAAMC,WAsC3BC,EAAW,SAACpB,GAChB,OACE,sBAAKqB,GAAG,YAAR,UACE,mBAAGA,GAAG,OAAN,kBACA,mBAAGA,GAAG,SAAN,oBACA,wBAAQA,GAAG,YAAYC,UAAU,kBAAjC,uBACA,mBAAGD,GAAG,cAAcE,KAAK,IAAzB,6BAkBSC,MAbf,WACE,OACE,sBAAKF,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,mBAAGD,GAAG,aAAN,sCAEF,sBAAMC,UAAU,cAAhB,SACE,cAAC,EAAD,UC/COG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.760e515d.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from 'react';\n\nclass QuoteMachine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: \"\"\n    }\n  }\n\n  componentDidMount() {\n    const data = null;\n\n    const xhr = new XMLHttpRequest();\n    xhr.withCredentials = true;\n    \n    xhr.addEventListener(\"readystatechange\", function () {\n      if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n      }\n    });\n    \n    xhr.open(\"GET\", \"https://yusufnb-quotes-v1.p.rapidapi.com/widget/~einstein.json\");\n    xhr.setRequestHeader(\"x-rapidapi-key\", \"SIGN-UP-FOR-KEY\");\n    xhr.setRequestHeader(\"x-rapidapi-host\", \"yusufnb-quotes-v1.p.rapidapi.com\");\n    \n    xhr.send(data);\n    this.setState({\n      quote: xhr.response\n    });\n    console.log(xhr.response);\n  }\n\n  render() {\n    return (\n      <QuoteBox />\n    );\n  }\n}\n\nconst QuoteBox = (props) => {\n  return (\n    <div id=\"quote-box\">\n      <p id=\"text\">text</p>\n      <p id=\"author\">author</p>\n      <button id=\"new-quote\" className=\"btn btn-primary\">new quote</button>\n      <a id=\"tweet-quote\" href=\"#\">tweet quote</a>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p id=\"page-title\">Quote Machine by smd92</p>\n      </header>\n      <main className=\"App-content\">\n        <QuoteMachine />\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}