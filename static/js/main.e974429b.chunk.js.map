{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["QuoteMachine","props","state","text","author","fetchQuote","bind","this","fetch","then","response","json","data","setState","content","React","Component","QuoteBox","id","className","onClick","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAGMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,OAAQ,IAEV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAND,E,qDASnB,WACEC,KAAKF,e,wBAGP,WAAc,IAAD,OACXG,MAAM,kCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZV,KAAMS,EAAKE,QACXV,OAAQQ,EAAKR,c,oBAKrB,WACE,OACE,cAAC,EAAD,CACED,KAAI,WAAMI,KAAKL,MAAMC,KAAjB,KACJC,OAAM,YAAOG,KAAKL,MAAME,QACxBC,WAAYE,KAAKF,iB,GA9BEU,IAAMC,WAoC3BC,EAAW,SAAChB,GAChB,OACE,sBAAKiB,GAAG,YAAR,UACE,mBAAGA,GAAG,OAAN,SAAcjB,EAAME,OACpB,mBAAGe,GAAG,SAAN,SAAgBjB,EAAMG,SACtB,iCACE,wBAAQc,GAAG,YAAYC,UAAU,kBAAkBC,QAASnB,EAAMI,WAAlE,uBAGA,mBAAGa,GAAG,cAAcG,KAAK,IAAzB,gCAqBOC,MAbf,WACE,OACE,sBAAKH,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,mBAAGD,GAAG,aAAN,sCAEF,sBAAMC,UAAU,cAAhB,SACE,cAAC,EAAD,UCnDOI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e974429b.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport React from \"react\";\r\n\r\nclass QuoteMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: \"\",\r\n      author: \"\",\r\n    };\r\n    this.fetchQuote = this.fetchQuote.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchQuote();\r\n  }\r\n\r\n  fetchQuote() {\r\n    fetch(\"https://api.quotable.io/random\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({\r\n          text: data.content,\r\n          author: data.author,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <QuoteBox\r\n        text={`\"${this.state.text}\"`}\r\n        author={`- ${this.state.author}`}\r\n        fetchQuote={this.fetchQuote}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst QuoteBox = (props) => {\r\n  return (\r\n    <div id=\"quote-box\">\r\n      <p id=\"text\">{props.text}</p>\r\n      <p id=\"author\">{props.author}</p>\r\n      <span>\r\n        <button id=\"new-quote\" className=\"btn btn-primary\" onClick={props.fetchQuote}>\r\n          new quote\r\n        </button>\r\n        <a id=\"tweet-quote\" href=\"#\">\r\n          tweet quote\r\n        </a>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p id=\"page-title\">Quote Machine by smd92</p>\r\n      </header>\r\n      <main className=\"App-content\">\r\n        <QuoteMachine />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}