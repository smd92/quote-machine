{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["QuoteMachine","props","state","text","author","fetched","tsbOptions","rerenderTsb","fetchQuote","bind","this","fetch","then","response","json","data","setState","content","options","React","Component","QuoteBox","id","url","className","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,OAAQ,GACRC,SAAS,EACTC,WAAY,CAAEH,KAAM,IACpBI,aAAa,GAEf,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBATD,E,qDAYnB,WACEC,KAAKF,e,wBAGP,WAAc,IAAD,OACXG,MAAM,kCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZb,KAAMY,EAAKE,QACXb,OAAQW,EAAKX,OACbC,SAAS,EACTC,WAAY,CAAEH,KAAK,IAAD,OAAMY,EAAKE,QAAX,gBAA0BF,EAAKX,SACjDG,aAAc,EAAKL,MAAMK,mB,oBAKjC,WACE,OACEG,KAAKR,MAAMG,SACT,cAAC,EAAD,CACEF,KAAI,WAAMO,KAAKR,MAAMC,KAAjB,KACJC,OAAM,YAAOM,KAAKR,MAAME,QACxBI,WAAYE,KAAKF,WACjBU,QAASR,KAAKR,MAAMI,WACpBC,YAAaG,KAAKR,MAAMK,kB,GAvCPY,IAAMC,WA8C3BC,EAAW,SAACpB,GAChB,OACE,sBAAKqB,GAAG,YAAR,UACE,mBAAGA,GAAG,OAAN,SAAcrB,EAAME,OACpB,mBAAGmB,GAAG,SAAN,SAAgBrB,EAAMG,SACtB,cAAC,IAAD,CAAoBkB,GAAG,QAAQC,IAAG,KAAQL,QAASjB,EAAMiB,SAAcjB,EAAMM,aAC7E,wBACEe,GAAG,YACHE,UAAU,kBACVC,QAASxB,EAAMO,WAHjB,2BAsBSkB,MAXf,WACE,OACE,qBAAKF,UAAU,MAAf,SACE,uBAAMA,UAAU,cAAhB,UACE,cAAC,EAAD,IACA,+CC5DOG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a9f107e1.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport React from \"react\";\r\nimport { TwitterShareButton } from \"react-twitter-embed\";\r\n\r\nclass QuoteMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: \"\",\r\n      author: \"\",\r\n      fetched: false,\r\n      tsbOptions: { text: \"\" },\r\n      rerenderTsb: true,\r\n    };\r\n    this.fetchQuote = this.fetchQuote.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchQuote();\r\n  }\r\n\r\n  fetchQuote() {\r\n    fetch(\"https://api.quotable.io/random\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({\r\n          text: data.content,\r\n          author: data.author,\r\n          fetched: true,\r\n          tsbOptions: { text: `\"${data.content}\"\\n- ${data.author}` },\r\n          rerenderTsb: !this.state.rerenderTsb,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.state.fetched && (\r\n        <QuoteBox\r\n          text={`\"${this.state.text}\"`}\r\n          author={`- ${this.state.author}`}\r\n          fetchQuote={this.fetchQuote}\r\n          options={this.state.tsbOptions}\r\n          rerenderTsb={this.state.rerenderTsb}\r\n        />\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nconst QuoteBox = (props) => {\r\n  return (\r\n    <div id=\"quote-box\">\r\n      <p id=\"text\">{props.text}</p>\r\n      <p id=\"author\">{props.author}</p>\r\n      <TwitterShareButton id=\"tweet\" url={`\\n`} options={props.options} key={props.rerenderTsb}/>\r\n      <button\r\n        id=\"new-quote\"\r\n        className=\"btn btn-primary\"\r\n        onClick={props.fetchQuote}\r\n      >\r\n        new quote\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <main className=\"App-content\">\r\n        <QuoteMachine />\r\n        <p>by smd92</p>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}